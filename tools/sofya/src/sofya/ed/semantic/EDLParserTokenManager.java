/* Generated By:JavaCC: Do not edit this line. EDLParserTokenManager.java */
/*
 * Copyright 2003-2007, Regents of the University of Nebraska
 *
 *  Licensed under the University of Nebraska Open Academic License,
 *  Version 1.0 (the "License"); you may not use this file except in
 *  compliance with the License. The License must be provided with
 *  the distribution of this software; if the license is absent from
 *  the distribution, please report immediately to galileo@cse.unl.edu
 *  and indicate where you obtained this software.
 *
 *  You may also obtain a copy of the License at:
 *
 *      http://sofya.unl.edu/LICENSE-1.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package sofya.ed.semantic;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ObjectType;
import sofya.base.Handler;
import sofya.base.ProgramUnit;
import sofya.ed.semantic.SemanticConstants;
import sofya.ed.semantic.EventSpecification.ArrayElementType;
import sofya.ed.semantic.EventSpecification.ArrayElementBounds;
import sofya.ed.semantic.EventSpecification.CallType;
import sofya.ed.semantic.EventSpecification.FieldType;
import sofya.ed.semantic.EventSpecification.MonitorType;
import sofya.ed.semantic.EventSpecification.MethodAction;
import sofya.ed.semantic.EDLSpecification.*;

public class EDLParserTokenManager implements EDLParserConstants
{
    private int anyStringCount = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20000L) != 0L)
            return 1;
         if ((active0 & 0x7fc0000000000a00L) != 0L)
            return 13;
         if ((active0 & 0x3fffffffffd5f0L) != 0L || (active1 & 0x380L) != 0L)
         {
            jjmatchedKind = 67;
            return 13;
         }
         return -1;
      case 1:
         if ((active0 & 0x3dfffffbff9ff0L) != 0L || (active1 & 0x380L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x2000004004000L) != 0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x3dfffffbff1fd0L) != 0L || (active1 & 0x180L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 2;
            }
            return 13;
         }
         if ((active0 & 0x2000004008020L) != 0L)
            return 13;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x398bffffff1fd0L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0x4740000000000L) != 0L)
            return 13;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x2883e7ffff0fc0L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x11081800000010L) != 0L)
            return 13;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x803e7ffff0fc0L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0x20800000000000L) != 0L)
            return 13;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x3e7ffff09c0L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 13;
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x140L) != 0L)
            return 13;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3e7ffff0880L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 13;
         }
         return -1;
      case 8:
         if ((active0 & 0x3e7ff9f0080L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
            return 13;
         }
         if ((active0 & 0x600000L) != 0L)
            return 13;
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x3e7ff860080L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
            return 13;
         }
         if ((active0 & 0x190000L) != 0L)
            return 13;
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x3e7fe860000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 10;
            return 13;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000080L) != 0L)
            return 13;
         return -1;
      case 11:
         if ((active0 & 0x2000000L) != 0L)
            return 13;
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x3e7fc860000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
            return 13;
         }
         return -1;
      case 12:
         if ((active0 & 0x3e7fc860000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 12;
            return 13;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000L) != 0L)
            return 13;
         if ((active0 & 0x3e7f8860000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 13;
            return 13;
         }
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x580000000L) != 0L)
            return 13;
         if ((active0 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x3e278860000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 14;
            return 13;
         }
         return -1;
      case 15:
         if ((active0 & 0x3e278000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 15;
            return 13;
         }
         if ((active0 & 0x860000L) != 0L)
            return 13;
         return -1;
      case 16:
         if ((active0 & 0x3c278000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 16;
            return 13;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 13;
         return -1;
      case 17:
         if ((active0 & 0x14040000000L) != 0L)
            return 13;
         if ((active0 & 0x28238000000L) != 0L)
         {
            if (jjmatchedPos != 17)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 17;
            }
            return 13;
         }
         return -1;
      case 18:
         if ((active0 & 0x4008000000L) != 0L)
         {
            if (jjmatchedPos != 18)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 18;
            }
            return 13;
         }
         if ((active0 & 0x28230000000L) != 0L)
            return 13;
         return -1;
      case 19:
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 19;
            return 13;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 13;
         return -1;
      case 20:
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 20;
            return 13;
         }
         return -1;
      case 21:
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 21;
            return 13;
         }
         return -1;
      case 22:
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 22;
            return 13;
         }
         return -1;
      case 23:
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 23;
            return 13;
         }
         return -1;
      case 24:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 24;
            return 13;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 13;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x2000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 83);
      case 41:
         return jjStopAtPos(0, 84);
      case 42:
         return jjStopAtPos(0, 70);
      case 43:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000L);
      case 44:
         return jjStopAtPos(0, 80);
      case 45:
         return jjStopAtPos(0, 75);
      case 46:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000L);
      case 47:
         return jjStartNfaWithStates_1(0, 81, 1);
      case 59:
         return jjStopAtPos(0, 82);
      case 64:
         return jjMoveStringLiteralDfa1_1(0x8L, 0x0L);
      case 66:
         return jjStartNfaWithStates_1(0, 55, 13);
      case 67:
         return jjStartNfaWithStates_1(0, 56, 13);
      case 68:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_1(0x800L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x40L, 0x0L);
      case 70:
         return jjStartNfaWithStates_1(0, 58, 13);
      case 73:
         return jjStartNfaWithStates_1(0, 59, 13);
      case 74:
         return jjStartNfaWithStates_1(0, 60, 13);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x400L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x80L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_1(0x100L, 0x0L);
      case 83:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_1(0x200L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x1000L, 0x0L);
      case 86:
         return jjStartNfaWithStates_1(0, 54, 13);
      case 90:
         return jjStartNfaWithStates_1(0, 61, 13);
      case 91:
         return jjStopAtPos(0, 63);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x3c000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x8200000000010L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x401000860000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x20L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x1080000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x280000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x2000004004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x780000000L, 0x180L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x18000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x500000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x30002061000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x40800000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x10001a000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 78);
      case 125:
         return jjStopAtPos(0, 79);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 68:
         return jjMoveStringLiteralDfa2_1(active0, 0x40L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x81000000800L, active1, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x290010L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x10400800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x1a000008L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x2000004000020L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0xc900780868400L, active1, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x7c000000100L, active1, 0L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x20002061000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x500000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000001200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200L);
      case 76:
         return jjMoveStringLiteralDfa3_1(active0, 0x40L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x402061000000L, active1, 0L);
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 5, 13);
         return jjMoveStringLiteralDfa3_1(active0, 0x400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x10L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x8L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000780860000L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x19000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x2003c81a000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x280L, active1, 0L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 13);
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x201004780800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x840000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(3, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(3, 72);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_1(active0, 0x40L, active1, 0L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_1(active0, 0x790000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x103c000000900L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 13);
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 42, 13);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 45, 13);
         return jjMoveStringLiteralDfa4_1(active0, 0x4001080L, active1, 0L);
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 50, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000780000010L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x8L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 46, 13);
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000860000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x207b000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_1(active0, 0x800L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 43, 13);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0x600000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x2061000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_1(active0, 0x100L, active1, 0L);
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(4, 4, 13);
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x10008L, active1, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000080L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0x180000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 48, 13);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 52, 13);
         return jjMoveStringLiteralDfa5_1(active0, 0x780860000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x1a000040L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 13);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0x3c000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_1(active0, 0x3c000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x800001a000800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0x10100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x2061000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x200L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 47, 13);
         return jjMoveStringLiteralDfa6_1(active0, 0x400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000L, active1, 0L);
      case 103:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x600040L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x780000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x860008L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_1(active0, 0x180000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_1(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_1(active0, 0x600L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_1(active0, 0x2061000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x4181080L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x3c000600000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x1a000100L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 51, 13);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0x780000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_1(active0, 0x800L, active1, 0L);
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(6, 3);
         return jjMoveStringLiteralDfa7_1(active0, 0x40L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x860000L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0x79a000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0x80L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x5860600L, active1, 0L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(7, 6, 13);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(7, 8, 13);
         return jjMoveStringLiteralDfa8_1(active0, 0x10800L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_1(active0, 0x3c000600000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa8_1(active0, 0x60001000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x180000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_1(active0, 0x800L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0x101000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0x82010000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(8, 21, 13);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(8, 22, 13);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_1(active0, 0x3c064001000L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x180000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0x680L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_1(active0, 0x18000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_1(active0, 0x200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_1(active0, 0x860000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(9, 73);
         break;
      case 95:
         return jjMoveStringLiteralDfa10_1(active0, 0x4060000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000600L, active1, 0L);
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(9, 19, 13);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(9, 20, 13);
         return jjMoveStringLiteralDfa10_1(active0, 0x100000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_1(active0, 0x418000080L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_1(active0, 0x3c000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0x80800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0x200000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(9, 16, 13);
         return jjMoveStringLiteralDfa10_1(active0, 0x60000800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_1(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa11_1(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x3c200000000L);
      case 102:
         return jjMoveStringLiteralDfa11_1(active0, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa11_1(active0, 0x60000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(10, 24, 13);
         return jjMoveStringLiteralDfa11_1(active0, 0x402000000L);
      case 110:
         return jjMoveStringLiteralDfa11_1(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa11_1(active0, 0x20000L);
      case 113:
         return jjMoveStringLiteralDfa11_1(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa11_1(active0, 0x800000L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(10, 7, 13);
         return jjMoveStringLiteralDfa11_1(active0, 0x600L);
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0x2018000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_1(active0, 0x2200800000L);
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0x4000000L);
      case 98:
         return jjMoveStringLiteralDfa12_1(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa12_1(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa12_1(active0, 0x18000000L);
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0x40000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(11, 25, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_1(active0, 0x3c000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_1(active0, 0x60000000L);
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0x600L);
      case 116:
         return jjMoveStringLiteralDfa12_1(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(12, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_1(active0, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa13_1(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa13_1(active0, 0x60000000L);
      case 101:
         return jjMoveStringLiteralDfa13_1(active0, 0x2080000600L);
      case 105:
         return jjMoveStringLiteralDfa13_1(active0, 0x100000000L);
      case 106:
         return jjMoveStringLiteralDfa13_1(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa13_1(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa13_1(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa13_1(active0, 0x18000000L);
      case 114:
         return jjMoveStringLiteralDfa13_1(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa13_1(active0, 0x3c000000000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_1(active0, 0x3c060000000L);
      case 97:
         return jjMoveStringLiteralDfa14_1(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa14_1(active0, 0x18000000L);
      case 101:
         return jjMoveStringLiteralDfa14_1(active0, 0x200020000L);
      case 105:
         return jjMoveStringLiteralDfa14_1(active0, 0x40000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(13, 26, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa14_1(active0, 0x2080000000L);
      case 114:
         return jjMoveStringLiteralDfa14_1(active0, 0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa14_1(active0, 0x400000600L);
      default :
         break;
   }
   return jjStartNfa_1(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(14, 9);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(14, 10);
         break;
      case 95:
         return jjMoveStringLiteralDfa15_1(active0, 0x18000000L);
      case 99:
         return jjMoveStringLiteralDfa15_1(active0, 0x20000L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(14, 31, 13);
         break;
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(14, 32, 13);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(14, 34, 13);
         return jjMoveStringLiteralDfa15_1(active0, 0x60000000L);
      case 108:
         return jjMoveStringLiteralDfa15_1(active0, 0x14200800000L);
      case 115:
         return jjMoveStringLiteralDfa15_1(active0, 0x28000040000L);
      case 116:
         return jjMoveStringLiteralDfa15_1(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_1(active0, 0x2218000000L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(15, 18, 13);
         break;
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(15, 23, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_1(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa16_1(active0, 0x14000000000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(15, 17, 13);
         return jjMoveStringLiteralDfa16_1(active0, 0x28000000000L);
      case 120:
         return jjMoveStringLiteralDfa16_1(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_1(active0, 0x14200000000L);
      case 105:
         return jjMoveStringLiteralDfa17_1(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa17_1(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa17_1(active0, 0x28000000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(16, 37, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_1(active0, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa17_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_1(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa18_1(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa18_1(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa18_1(active0, 0x28000000000L);
      case 115:
         return jjMoveStringLiteralDfa18_1(active0, 0x200000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(17, 30, 13);
         return jjMoveStringLiteralDfa18_1(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa19_1(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(18, 33, 13);
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_1(active0, 0x8008000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(18, 29, 13);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(18, 28, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_1(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa20_1(active0, 0x8000000000L);
      case 98:
         return jjMoveStringLiteralDfa20_1(active0, 0x4000000000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(19, 27, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_1(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa21_1(active0, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa21_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_1(active0, 0x8000000000L);
      case 117:
         return jjMoveStringLiteralDfa22_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(20, active0, 0L);
}
private final int jjMoveStringLiteralDfa22_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa23_1(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa23_1(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_1(21, active0, 0L);
}
private final int jjMoveStringLiteralDfa23_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa24_1(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa24_1(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_1(22, active0, 0L);
}
private final int jjMoveStringLiteralDfa24_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa25_1(active0, 0x8000000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(24, 38, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_1(23, active0, 0L);
}
private final int jjMoveStringLiteralDfa25_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(25, 39, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_1(24, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(11);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(13);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 65)
                     kind = 65;
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar != 36)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(0, 2);
                  break;
               case 8:
                  jjAddStates(3, 4);
                  break;
               case 13:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(0, 2);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 4);
                  break;
               case 13:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(0, 0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffaffffc9ffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(7);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0xfffffffaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 34 && kind > 65)
                     kind = 65;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(7);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(0, 2);
                  break;
               case 9:
                  jjAddStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(7);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(0, 2);
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 5, 8, 9, 9, 10, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, "\100\151\155\160\157\162\164", "\142\145\147\151\156", 
"\145\156\144", "\105\104\114\123\165\151\164\145", 
"\117\142\163\145\162\166\141\142\154\145\163", "\120\162\145\141\155\142\154\145", 
"\123\171\163\164\145\155\55\143\154\141\163\163\145\163\72", "\115\157\144\165\154\145\55\143\154\141\163\163\145\163\72", 
"\104\141\164\141\142\141\163\145\55\164\141\147\72", "\124\171\160\145\55\156\141\155\145\72", "\43\111\116\124", "\151\156", 
"\156\157\164", "\156\145\167\137\157\142\152\145\143\164", 
"\143\157\156\163\164\162\165\143\164\137\157\142\152\145\143\164", "\143\157\156\163\164\162\165\143\164\137\146\151\156\151\163\150", 
"\147\145\164\137\163\164\141\164\151\143", "\160\165\164\137\163\164\141\164\151\143", 
"\147\145\164\137\146\151\145\154\144", "\160\165\164\137\146\151\145\154\144", 
"\143\157\156\163\164\162\165\143\164\157\162\137\143\141\154\154", "\163\164\141\164\151\143\137\143\141\154\154", 
"\166\151\162\164\165\141\154\137\143\141\154\154", "\151\156\164\145\162\146\141\143\145\137\143\141\154\154", 
"\166\151\162\164\165\141\154\137\155\145\164\150\157\144\137\145\156\164\145\162", 
"\166\151\162\164\165\141\154\137\155\145\164\150\157\144\137\145\170\151\164", 
"\163\164\141\164\151\143\137\155\145\164\150\157\144\137\145\156\164\145\162", "\163\164\141\164\151\143\137\155\145\164\150\157\144\137\145\170\151\164", 
"\155\157\156\151\164\157\162\137\143\157\156\164\145\156\144", "\155\157\156\151\164\157\162\137\141\143\161\165\151\162\145", 
"\155\157\156\151\164\157\162\137\160\162\145\137\162\145\154\145\141\163\145", "\155\157\156\151\164\157\162\137\162\145\154\145\141\163\145", 
"\164\150\162\157\167", "\143\141\164\143\150", 
"\163\164\141\164\151\143\137\151\156\151\164\137\145\156\164\145\162", 
"\141\162\162\141\171\137\145\154\145\155\145\156\164\137\154\157\141\144\137\142\157\165\156\144\163", 
"\141\162\162\141\171\137\145\154\145\155\145\156\164\137\163\164\157\162\145\137\142\157\165\156\144\163", "\141\162\162\141\171\137\145\154\145\155\145\156\164\137\154\157\141\144", 
"\141\162\162\141\171\137\145\154\145\155\145\156\164\137\163\164\157\162\145", "\164\162\165\145", "\146\141\154\163\145", "\166\157\151\144", 
"\142\171\164\145", "\143\150\141\162", "\144\157\165\142\154\145", "\146\154\157\141\164", 
"\151\156\164", "\154\157\156\147", "\142\157\157\154\145\141\156", "\163\150\157\162\164", 
"\163\164\162\151\156\147", "\126", "\102", "\103", "\104", "\106", "\111", "\112", "\132", "\123", 
"\133", null, null, null, null, null, null, "\52", "\155\151\156\72", 
"\155\141\170\72", "\116\157\55\155\157\144\165\154\145\72", "\53", "\55", "\56\52", "\53\163", 
"\173", "\175", "\54", "\57", "\73", "\50", "\51", "\56", };
public static final String[] lexStateNames = {
   "PERM_WILD_STRING", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0x3fffcfL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[14];
private final int[] jjstateSet = new int[28];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public EDLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public EDLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[6]);
                                     anyStringCount++;
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[7]);
                                        anyStringCount++;
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[9]);
                                            anyStringCount++;
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[10]);
                                            anyStringCount++;
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[11]);
                                           anyStringCount++;
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            if (--anyStringCount == 0) {
                SwitchTo(DEFAULT);
            }
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            if (anyStringCount > 0) {
                anyStringCount--;
                if (anyStringCount == 0) {
                        SwitchTo(DEFAULT);
                }
            }
         break;
      default : 
         break;
   }
}
}
